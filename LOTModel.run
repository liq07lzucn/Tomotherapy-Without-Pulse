reset;
model LOTmodel.mod;
data DataProstate/tomononlinearRealCases_split_1_vxls_200.dat;
#data warmstart.dat;
option solver gurobi, solution_round 1;
# The one below cuts like 90% of the time
option gurobi_options $gurobi_options 'mipgap 1e-2';
# Reduces the time to a half
option gurobi_options  $gurobi_options 'outlev 1';
option gurobi_options  $gurobi_options 'feastol 1e-2';
option gurobi_options $gurobi_options 'lpmethod 0';
option gurobi_options $gurobi_options 'AggFill 100';
option gurobi_options $gurobi_options 'predual 0';
option gurobi_options $gurobi_options 'presolve 1';
option gurobi_options $gurobi_options 'warmstart 3';

problem SOLVE51: z, z_plus, z_minus, betas, B, cgamma, lgamma, ObjectiveFunction, positive_only, doses_to_j_yparam, LOC, LCT, endOpen, endClose, eitherOpenOrClose;

solve SOLVE51;

# Having solved the 51 projections case. Refine the grid where it matters. First Create times

# Generate the sets
for {l in LEAVES} {
    let pcounter := 0;
    for {p in {0..((numProjections - 1) + maxkcko)}} {
    	# Test whether this is a leaf-state change or not
    	if 1 = B[l,p] or 1 = cgamma[l,p] then {
       	    for {r_index in 0..r} {
       	       let TIMES[l] := TIMES[l] union {timeperprojection/r};
	       let PROJIRREGACTIVE[l] := PROJIRREGACTIVE[l] union {pcounter};
               let PROJIRREG[l] := PROJIRREG[l] union {pcounter};
	       let PINVMAPPER[l] := PINVMAPPER[l] union {p}
	       let PMAPPER[l, p] := PMAPPER[l, p] union {pcounter};
	       let pcounter := pcounter + 1;
       	    }
    	} else {
       	   let TIMES[l] := TIMES[l] union {timeperprojection};
	   let PROJIRREGACTIVE[l] := PROJIRREGACTIVE[l] union {pcounter};
           let PROJIRREG[l] := PROJIRREG[l] union {pcounter};
           let PINVMAPPER[l] := PINVMAPPER[l] union {p}
           let PMAPPER[l, p] := PMAPPER[l, p] union {pcounter};
           let pcounter := pcounter + 1;
        }
    }
}

for {(l,p,v) in KNJMPARAMETERS} {
    if 1 = B[l,p] or 1 = cgamma[l,p] then {
        for {newp in PMAPPER[l, p]} {
            let NEWKNJ := NEWKNJ union {(l, newp, v)};
        }
    }
}

for {l in LEAVES} {
    for {p in {PROJIRREGACTIVE[l] diff last(PROJIRREGACTIVE[l]) }{
    	#Calculate KC and KO
	let lotc := 1;
	let lctc := 1;
	repeat {
	       let LOTSETFINE[l, p] := LOTSETFINE [l, p] union {lotc};
	       let lotc := lotc + 1;
	       if TIMES[l][p + lotc] - TIMES[l][p] > timeopen or p == last(PROJIRREGACTIVE[l]) then {
	       	  break
	       }
	}
	repeat {
	       let LCTSETFINE[l, p] := LCTSETFINE [l, p] union {lctc};
	       let lctc := lctc + 1;
	       if TIMES[l][p + lctc] - TIMES[l][p] > timeopen or p == last(PROJIRREGACTIVE[l]) then {
	       	  break
	       }
	}
    }
}

problem SOLVEFINE: z, z_plus, z_minus, betasFine, BFine, cgammaFine, lgammaFine, ObjectiveFunction, positive_only, doses_Fine, LOC_Fine, LCT_Fine, endOpen_Fine, endClose_Fine, eitherOpenOrClose_Fine;
solve SOLVEFINE;
